<?php
namespace frontend\models;
use Helper\Scenario;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

class Member extends ActiveRecord implements IdentityInterface
{
    public $password;
    public $remember;
    //public $sms;
    const SCENARIO_LOGIN ='login';
    const SCENARIO_REGIST ='regist';
    //验证规则
    public function rules()
    {
        return [
            [['password','username'],'required'],
            [['email','tel'],'required','on'=>self::SCENARIO_REGIST],
            ['tel','match','pattern'=>'/^1[0-9]{10}$/','on'=>self::SCENARIO_REGIST],
            ['email','match','pattern'=>'/^[\w\-\.]+@[\w\-]+(\.\w+)+$/','on'=>self::SCENARIO_REGIST],
            ['remember','safe'],
        ];
    }

    //注册保存用户信息
    public function beforeSave($insert)
    {
        if($insert){
            $this->password_hash=\Yii::$app->security->generatePasswordHash($this->password);
            $this->auth_key=uniqid();
            $this->created_at=time();
            $this->status=1;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /*public function scenarios() {
        $scenarios[self::SCENARIO_REGIST] = ['sms'];
        return $scenarios;
    }*/


    //用户登录
/*    public function login(){
        $user=Member::findOne(['username'=>$model->username]);
        //var_dump($user);exit;
        if($user){
            $relust=\Yii::$app->security->validatePassword($model->password,$user->password_hash);//验证密码
            if($relust){
                //密码正确
                $user->last_login_time=time();
                $user->last_login_ip=\Yii::$app->request->userIP;
                $user->save(false);
                //判断用户是否勾选记住登录信息
                if($model->remember){
                    //echo '自动登录成功';exit;
                    \Yii::$app->user->login($user,7*24*3600);
                }else{
                    //echo '登录成功';exit;
                    \Yii::$app->user->login($user);
                    //\Yii::$app->session->setFlash('success','登录成功');
                }
                return $this->redirect(['register']);
            }else{
                //密码错误
                throw new NotFoundHttpException('密码错误');
            }
        }else{
            //没有查到该用户
            //var_dump(111);exit;
            //echo '没有该用户';exit;
            throw new NotFoundHttpException('没有该用户');
        }

    }*/

    /**
     * Finds an identity by the given ID.
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface the identity object that matches the given ID.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentity($id)
    {
        return self::findOne(['id'=>$id]);
    }

    /**
     * Finds an identity by the given token.
     * @param mixed $token the token to be looked for
     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.
     * For example, [[\yii\filters\auth\HttpBearerAuth]] will set this parameter to be `yii\filters\auth\HttpBearerAuth`.
     * @return IdentityInterface the identity object that matches the given token.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    /**
     * Returns an ID that can uniquely identify a user identity.
     * @return string|int an ID that uniquely identifies a user identity.
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns a key that can be used to check the validity of a given identity ID.
     *
     * The key should be unique for each individual user, and should be persistent
     * so that it can be used to check the validity of the user identity.
     *
     * The space of such keys should be big enough to defeat potential identity attacks.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @return string a key that is used to check the validity of a given identity ID.
     * @see validateAuthKey()
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * Validates the given auth key.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @param string $authKey the given auth key
     * @return bool whether the given auth key is valid.
     * @see getAuthKey()
     */
    public function validateAuthKey($authKey)
    {
        return $authKey==$this->auth_key;
    }
}